import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;

import javax.management.timer.Timer;
import javax.swing.JButton;
import javax.swing.JFrame;

public class TempCode {
	private static int HEIGHT;
	private static int WIDTH;
	private static final int ITERATIONS = 100;
	private static final int STARTING_PROBABILITY = 50;
	private static Cell[][] $cellGrid;
	private static JFrame frame = new JFrame("GOL");
	private static JButton[][] $buttons;
	private static JButton genButton = new JButton("Generate");
	private static JButton enableInfectedButton = new JButton("Enable Infected");
	private static JButton clearButton = new JButton("Clear");
	private static boolean enableInfected = false;
	ButtonListener listener = new ButtonListener();

	public TempCode(int height, int width) {
		HEIGHT = height;
		WIDTH = width;
		$cellGrid = new Cell[HEIGHT][WIDTH];
		$buttons = new JButton[HEIGHT][WIDTH];
		for (int i = 0; i < $cellGrid.length; i++) {
			for (int j = 0; j < $cellGrid[i].length; j++) {
				$cellGrid[i][j] = new Cell(false);
			}
		}
	}

	public static void print() {
		for (int i = 0; i < $cellGrid.length; i++) {
			for (int j = 0; j < $cellGrid[i].length; j++) {
				System.out.print($cellGrid[i][j] + " ");
			}
			System.out.println();
		}
	}

	public static void cycle() {
		for (int i = 0; i < $cellGrid.length; i++) {
			for (int j = 0; j < $cellGrid[i].length; j++) {
				if($cellGrid[i][j].getInfected())
					$cellGrid[i][j].setState(true);
				if($cellGrid[i][j].getState()) {
					if($cellGrid[i][j].getNeighborSum() == 2 || $cellGrid[i][j].getNeighborSum() == 3)
						$cellGrid[i][j].setState(true);
					else if($cellGrid[i][j].getNeighborSum() == 5 && enableInfected)
						$cellGrid[i][j].setInfected(true);
					else
						$cellGrid[i][j].setState(false);
				}
				else
					if($cellGrid[i][j].getNeighborSum() == 3)
						$cellGrid[i][j].setState(true);
			}
		}
	}

	public static void calculateNeighborSums() {
		for (int i = 0; i < $cellGrid.length; i++) {
			for (int j = 0; j < $cellGrid[i].length; j++) {
				int tempCount = 0;
				if(i > 0) {
					if($cellGrid[i-1][j].getState())
						tempCount++;
					if(j > 0) {
						if($cellGrid[i-1][j-1].getState())
							tempCount++;
					}
					if(j < WIDTH - 1) {
						if($cellGrid[i-1][j+1].getState())
							tempCount++;
					}
				}
				if(i < HEIGHT - 1) {
					if($cellGrid[i+1][j].getState())
						tempCount++;
					if(j > 0) {
						if($cellGrid[i+1][j-1].getState())
							tempCount++;
					}
					if(j < WIDTH - 1) {
						if($cellGrid[i+1][j+1].getState())
							tempCount++;
					}
				}
				if(j > 0) 
					if($cellGrid[i][j-1].getState())
						tempCount++;
				if(j < WIDTH - 1) 
					if($cellGrid[i][j+1].getState())
						tempCount++;
				$cellGrid[i][j].setNeighborSum(tempCount);
			}
		}
	}

	public class ButtonListener implements ActionListener{
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == genButton) {
				calculateNeighborSums();
				cycle();
				updateColors();
			}
			if(e.getSource() == enableInfectedButton) {
				enableInfected = ! enableInfected;
				if(enableInfected)
					enableInfectedButton.setText("Disable Infected");
				else 
					enableInfectedButton.setText("Enable Infected");
			}
			if(e.getSource() == clearButton) {
				for (int i = 0; i < $buttons.length; i++)
					for (int j = 0; j < $buttons[i].length; j++) {
						$buttons[i][j].setBackground(new Color(0, 0, 0));
						$cellGrid[i][j].setState(false);
						$cellGrid[i][j].setNeighborSum(0);
						$cellGrid[i][j].setInfected(false);
					}
			}
			for (int i = 0; i < $buttons.length; i++)
				for (int j = 0; j < $buttons.length; j++)
					if(e.getSource() == $buttons[i][j]) {
						$cellGrid[i][j].setState(! $cellGrid[i][j].getState());
						$cellGrid[i][j].setInfected(false);
					}
			updateColors();
		}
	}

	public void display() {
		frame.setLayout(null);
		frame.setPreferredSize(new Dimension(HEIGHT * 20 + 100, WIDTH * 20 + 100));
		//Create Button Array (all black)
		int x = 50;
		int y = 50;
		for (int i = 0; i < $buttons.length; i++) {
			for (int j = 0; j < $buttons.length; j++) {
				$buttons[i][j] = new JButton();
				$buttons[i][j].addActionListener(listener);
				$buttons[i][j].setBackground(new Color(0, 0, 0));
				$buttons[i][j].setOpaque(true);
				$buttons[i][j].setBorderPainted(false);
				$buttons[i][j].setBounds(x, y, 19, 19);
				frame.add($buttons[i][j]);
				x += 20;
			}
			x = 50;
			y += 20;
		}
		// BUTTON SIZES SCALE WITH BOARD SIZES; THE LARGER THE BOARD, THE LARGER THE BUTTONS
		genButton.addActionListener(listener);
		genButton.setBounds((HEIGHT * 20) / 3 + 55, 5, (HEIGHT * 20) / 3 - 10, 40);
		frame.add(genButton);
		
		clearButton.addActionListener(listener);
		clearButton.setBounds(2 * (HEIGHT * 20) / 3 + 60, 5, (HEIGHT * 20) / 3 - 10, 40);
		frame.add(clearButton);

		enableInfectedButton.addActionListener(listener);
		enableInfectedButton.setBounds(50, 5, (HEIGHT * 20) / 3 - 10, 40);
		frame.add(enableInfectedButton);

		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setResizable(false);
		frame.pack();
		frame.setVisible(true);
	}

	public void updateColors() {
		for (int i = 0; i < $buttons.length; i++)
			for (int j = 0; j < $buttons.length; j++) {
				if($cellGrid[i][j].getState())
					$buttons[i][j].setBackground(new Color(255, 255, 0));
				else
					$buttons[i][j].setBackground(new Color(0, 0, 0));
				if($cellGrid[i][j].getInfected()) {
					$buttons[i][j].setBackground(new Color(255, 0, 0));
				}
			}
	}
}
